// Generated from src/java/painless/Painless.g4 by ANTLR 4.5
package painless;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PainlessLexer extends Lexer {
    static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
        new PredictionContextCache();
    public static final int
        WS=1, LBRACK=2, RBRACK=3, LBRACE=4, RBRACE=5, LP=6, RP=7, DOT=8, COMMA=9, 
        SEMICOLON=10, IF=11, ELSE=12, WHILE=13, DO=14, FOR=15, CONTINUE=16, BREAK=17, 
        RETURN=18, BOOLNOT=19, BWNOT=20, MUL=21, DIV=22, REM=23, ADD=24, SUB=25, 
        LSH=26, RSH=27, USH=28, CAT=29, LT=30, LTE=31, GT=32, GTE=33, EQ=34, NE=35, 
        BWAND=36, BWXOR=37, BWOR=38, BOOLAND=39, BOOLOR=40, COND=41, COLON=42, 
        INCR=43, DECR=44, ASSIGN=45, AADD=46, ASUB=47, AMUL=48, ADIV=49, AREM=50, 
        AAND=51, AXOR=52, AOR=53, ALSH=54, ARSH=55, AUSH=56, ACAT=57, OCTAL=58, 
        HEX=59, INTEGER=60, DECIMAL=61, STRING=62, CHAR=63, TRUE=64, FALSE=65, 
        NULL=66, VOID=67, ID=68;
    public static String[] modeNames = {
        "DEFAULT_MODE"
    };

    public static final String[] ruleNames = {
        "WS", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "LP", "RP", "DOT", "COMMA", 
        "SEMICOLON", "IF", "ELSE", "WHILE", "DO", "FOR", "CONTINUE", "BREAK", 
        "RETURN", "BOOLNOT", "BWNOT", "MUL", "DIV", "REM", "ADD", "SUB", "LSH", 
        "RSH", "USH", "CAT", "LT", "LTE", "GT", "GTE", "EQ", "NE", "BWAND", "BWXOR", 
        "BWOR", "BOOLAND", "BOOLOR", "COND", "COLON", "INCR", "DECR", "ASSIGN", 
        "AADD", "ASUB", "AMUL", "ADIV", "AREM", "AAND", "AXOR", "AOR", "ALSH", 
        "ARSH", "AUSH", "ACAT", "OCTAL", "HEX", "INTEGER", "DECIMAL", "STRING", 
        "CHAR", "TRUE", "FALSE", "NULL", "VOID", "ID"
    };

    private static final String[] _LITERAL_NAMES = {
        null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", "';'", 
        "'if'", "'else'", "'while'", "'do'", "'for'", "'continue'", "'break'", 
        "'return'", "'!'", "'~'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", "'>>'", 
        "'>>>'", "'..'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&'", 
        "'^'", "'|'", "'&&'", "'||'", "'?'", "':'", "'++'", "'--'", "'='", "'+='", 
        "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'<<='", "'>>='", 
        "'>>>='", "'..='", null, null, null, null, null, null, "'true'", "'false'", 
        "'null'", "'void'"
    };
    private static final String[] _SYMBOLIC_NAMES = {
        null, "WS", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "LP", "RP", "DOT", 
        "COMMA", "SEMICOLON", "IF", "ELSE", "WHILE", "DO", "FOR", "CONTINUE", 
        "BREAK", "RETURN", "BOOLNOT", "BWNOT", "MUL", "DIV", "REM", "ADD", "SUB", 
        "LSH", "RSH", "USH", "CAT", "LT", "LTE", "GT", "GTE", "EQ", "NE", "BWAND", 
        "BWXOR", "BWOR", "BOOLAND", "BOOLOR", "COND", "COLON", "INCR", "DECR", 
        "ASSIGN", "AADD", "ASUB", "AMUL", "ADIV", "AREM", "AAND", "AXOR", "AOR", 
        "ALSH", "ARSH", "AUSH", "ACAT", "OCTAL", "HEX", "INTEGER", "DECIMAL", 
        "STRING", "CHAR", "TRUE", "FALSE", "NULL", "VOID", "ID"
    };
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }


    public PainlessLexer(CharStream input) {
        super(input);
        _interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
    }

    @Override
    public String getGrammarFileName() { return "Painless.g4"; }

    @Override
    public String[] getRuleNames() { return ruleNames; }

    @Override
    public String getSerializedATN() { return _serializedATN; }

    @Override
    public String[] getModeNames() { return modeNames; }

    @Override
    public ATN getATN() { return _ATN; }

    public static final String _serializedATN =
        "\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2F\u01b1\b\1\4\2\t"+
        "\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
        "\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
        "\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
        "\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
        "\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
        ",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
        "\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
        "\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\3\2\6\2\u008d\n\2\r\2"+
        "\16\2\u008e\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3"+
        "\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
        "\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21"+
        "\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23"+
        "\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30"+
        "\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35"+
        "\3\36\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3"+
        "$\3%\3%\3&\3&\3\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3+\3+\3,\3,\3,\3-\3-\3-"+
        "\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63"+
        "\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\3\67"+
        "\38\38\38\38\39\39\39\39\39\3:\3:\3:\3:\3;\3;\6;\u013e\n;\r;\16;\u013f"+
        "\3;\5;\u0143\n;\3<\3<\3<\6<\u0148\n<\r<\16<\u0149\3<\5<\u014d\n<\3=\3"+
        "=\3=\7=\u0152\n=\f=\16=\u0155\13=\5=\u0157\n=\3=\5=\u015a\n=\3>\3>\3>"+
        "\7>\u015f\n>\f>\16>\u0162\13>\5>\u0164\n>\3>\3>\7>\u0168\n>\f>\16>\u016b"+
        "\13>\5>\u016d\n>\3>\3>\6>\u0171\n>\r>\16>\u0172\5>\u0175\n>\3>\3>\5>\u0179"+
        "\n>\3>\6>\u017c\n>\r>\16>\u017d\5>\u0180\n>\3>\5>\u0183\n>\3?\3?\3?\3"+
        "?\3?\3?\7?\u018b\n?\f?\16?\u018e\13?\3?\3?\3@\3@\3@\3@\3A\3A\3A\3A\3A"+
        "\3B\3B\3B\3B\3B\3B\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3E\3E\7E\u01ad\nE\fE"+
        "\16E\u01b0\13E\3\u018c\2F\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25"+
        "\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32"+
        "\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a"+
        "\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>{?}@\177A\u0081B\u0083C\u0085D\u0087"+
        "E\u0089F\3\2\17\5\2\13\f\17\17\"\"\3\2\629\4\2NNnn\4\2ZZzz\5\2\62;CHc"+
        "h\3\2\63;\3\2\62;\4\2GGgg\4\2--//\4\2HHhh\4\2$$^^\5\2C\\aac|\6\2\62;C"+
        "\\aac|\u01c6\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2"+
        "\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2"+
        "\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2"+
        "\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2"+
        "\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3"+
        "\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2"+
        "\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2"+
        "S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3"+
        "\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2"+
        "\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2"+
        "y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2\2\u0083"+
        "\3\2\2\2\2\u0085\3\2\2\2\2\u0087\3\2\2\2\2\u0089\3\2\2\2\3\u008c\3\2\2"+
        "\2\5\u0092\3\2\2\2\7\u0094\3\2\2\2\t\u0096\3\2\2\2\13\u0098\3\2\2\2\r"+
        "\u009a\3\2\2\2\17\u009c\3\2\2\2\21\u009e\3\2\2\2\23\u00a0\3\2\2\2\25\u00a2"+
        "\3\2\2\2\27\u00a4\3\2\2\2\31\u00a7\3\2\2\2\33\u00ac\3\2\2\2\35\u00b2\3"+
        "\2\2\2\37\u00b5\3\2\2\2!\u00b9\3\2\2\2#\u00c2\3\2\2\2%\u00c8\3\2\2\2\'"+
        "\u00cf\3\2\2\2)\u00d1\3\2\2\2+\u00d3\3\2\2\2-\u00d5\3\2\2\2/\u00d7\3\2"+
        "\2\2\61\u00d9\3\2\2\2\63\u00db\3\2\2\2\65\u00dd\3\2\2\2\67\u00e0\3\2\2"+
        "\29\u00e3\3\2\2\2;\u00e7\3\2\2\2=\u00ea\3\2\2\2?\u00ec\3\2\2\2A\u00ef"+
        "\3\2\2\2C\u00f1\3\2\2\2E\u00f4\3\2\2\2G\u00f7\3\2\2\2I\u00fa\3\2\2\2K"+
        "\u00fc\3\2\2\2M\u00fe\3\2\2\2O\u0100\3\2\2\2Q\u0103\3\2\2\2S\u0106\3\2"+
        "\2\2U\u0108\3\2\2\2W\u010a\3\2\2\2Y\u010d\3\2\2\2[\u0110\3\2\2\2]\u0112"+
        "\3\2\2\2_\u0115\3\2\2\2a\u0118\3\2\2\2c\u011b\3\2\2\2e\u011e\3\2\2\2g"+
        "\u0121\3\2\2\2i\u0124\3\2\2\2k\u0127\3\2\2\2m\u012a\3\2\2\2o\u012e\3\2"+
        "\2\2q\u0132\3\2\2\2s\u0137\3\2\2\2u\u013b\3\2\2\2w\u0144\3\2\2\2y\u0156"+
        "\3\2\2\2{\u0174\3\2\2\2}\u0184\3\2\2\2\177\u0191\3\2\2\2\u0081\u0195\3"+
        "\2\2\2\u0083\u019a\3\2\2\2\u0085\u01a0\3\2\2\2\u0087\u01a5\3\2\2\2\u0089"+
        "\u01aa\3\2\2\2\u008b\u008d\t\2\2\2\u008c\u008b\3\2\2\2\u008d\u008e\3\2"+
        "\2\2\u008e\u008c\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0090\3\2\2\2\u0090"+
        "\u0091\b\2\2\2\u0091\4\3\2\2\2\u0092\u0093\7}\2\2\u0093\6\3\2\2\2\u0094"+
        "\u0095\7\177\2\2\u0095\b\3\2\2\2\u0096\u0097\7]\2\2\u0097\n\3\2\2\2\u0098"+
        "\u0099\7_\2\2\u0099\f\3\2\2\2\u009a\u009b\7*\2\2\u009b\16\3\2\2\2\u009c"+
        "\u009d\7+\2\2\u009d\20\3\2\2\2\u009e\u009f\7\60\2\2\u009f\22\3\2\2\2\u00a0"+
        "\u00a1\7.\2\2\u00a1\24\3\2\2\2\u00a2\u00a3\7=\2\2\u00a3\26\3\2\2\2\u00a4"+
        "\u00a5\7k\2\2\u00a5\u00a6\7h\2\2\u00a6\30\3\2\2\2\u00a7\u00a8\7g\2\2\u00a8"+
        "\u00a9\7n\2\2\u00a9\u00aa\7u\2\2\u00aa\u00ab\7g\2\2\u00ab\32\3\2\2\2\u00ac"+
        "\u00ad\7y\2\2\u00ad\u00ae\7j\2\2\u00ae\u00af\7k\2\2\u00af\u00b0\7n\2\2"+
        "\u00b0\u00b1\7g\2\2\u00b1\34\3\2\2\2\u00b2\u00b3\7f\2\2\u00b3\u00b4\7"+
        "q\2\2\u00b4\36\3\2\2\2\u00b5\u00b6\7h\2\2\u00b6\u00b7\7q\2\2\u00b7\u00b8"+
        "\7t\2\2\u00b8 \3\2\2\2\u00b9\u00ba\7e\2\2\u00ba\u00bb\7q\2\2\u00bb\u00bc"+
        "\7p\2\2\u00bc\u00bd\7v\2\2\u00bd\u00be\7k\2\2\u00be\u00bf\7p\2\2\u00bf"+
        "\u00c0\7w\2\2\u00c0\u00c1\7g\2\2\u00c1\"\3\2\2\2\u00c2\u00c3\7d\2\2\u00c3"+
        "\u00c4\7t\2\2\u00c4\u00c5\7g\2\2\u00c5\u00c6\7c\2\2\u00c6\u00c7\7m\2\2"+
        "\u00c7$\3\2\2\2\u00c8\u00c9\7t\2\2\u00c9\u00ca\7g\2\2\u00ca\u00cb\7v\2"+
        "\2\u00cb\u00cc\7w\2\2\u00cc\u00cd\7t\2\2\u00cd\u00ce\7p\2\2\u00ce&\3\2"+
        "\2\2\u00cf\u00d0\7#\2\2\u00d0(\3\2\2\2\u00d1\u00d2\7\u0080\2\2\u00d2*"+
        "\3\2\2\2\u00d3\u00d4\7,\2\2\u00d4,\3\2\2\2\u00d5\u00d6\7\61\2\2\u00d6"+
        ".\3\2\2\2\u00d7\u00d8\7\'\2\2\u00d8\60\3\2\2\2\u00d9\u00da\7-\2\2\u00da"+
        "\62\3\2\2\2\u00db\u00dc\7/\2\2\u00dc\64\3\2\2\2\u00dd\u00de\7>\2\2\u00de"+
        "\u00df\7>\2\2\u00df\66\3\2\2\2\u00e0\u00e1\7@\2\2\u00e1\u00e2\7@\2\2\u00e2"+
        "8\3\2\2\2\u00e3\u00e4\7@\2\2\u00e4\u00e5\7@\2\2\u00e5\u00e6\7@\2\2\u00e6"+
        ":\3\2\2\2\u00e7\u00e8\7\60\2\2\u00e8\u00e9\7\60\2\2\u00e9<\3\2\2\2\u00ea"+
        "\u00eb\7>\2\2\u00eb>\3\2\2\2\u00ec\u00ed\7>\2\2\u00ed\u00ee\7?\2\2\u00ee"+
        "@\3\2\2\2\u00ef\u00f0\7@\2\2\u00f0B\3\2\2\2\u00f1\u00f2\7@\2\2\u00f2\u00f3"+
        "\7?\2\2\u00f3D\3\2\2\2\u00f4\u00f5\7?\2\2\u00f5\u00f6\7?\2\2\u00f6F\3"+
        "\2\2\2\u00f7\u00f8\7#\2\2\u00f8\u00f9\7?\2\2\u00f9H\3\2\2\2\u00fa\u00fb"+
        "\7(\2\2\u00fbJ\3\2\2\2\u00fc\u00fd\7`\2\2\u00fdL\3\2\2\2\u00fe\u00ff\7"+
        "~\2\2\u00ffN\3\2\2\2\u0100\u0101\7(\2\2\u0101\u0102\7(\2\2\u0102P\3\2"+
        "\2\2\u0103\u0104\7~\2\2\u0104\u0105\7~\2\2\u0105R\3\2\2\2\u0106\u0107"+
        "\7A\2\2\u0107T\3\2\2\2\u0108\u0109\7<\2\2\u0109V\3\2\2\2\u010a\u010b\7"+
        "-\2\2\u010b\u010c\7-\2\2\u010cX\3\2\2\2\u010d\u010e\7/\2\2\u010e\u010f"+
        "\7/\2\2\u010fZ\3\2\2\2\u0110\u0111\7?\2\2\u0111\\\3\2\2\2\u0112\u0113"+
        "\7-\2\2\u0113\u0114\7?\2\2\u0114^\3\2\2\2\u0115\u0116\7/\2\2\u0116\u0117"+
        "\7?\2\2\u0117`\3\2\2\2\u0118\u0119\7,\2\2\u0119\u011a\7?\2\2\u011ab\3"+
        "\2\2\2\u011b\u011c\7\61\2\2\u011c\u011d\7?\2\2\u011dd\3\2\2\2\u011e\u011f"+
        "\7\'\2\2\u011f\u0120\7?\2\2\u0120f\3\2\2\2\u0121\u0122\7(\2\2\u0122\u0123"+
        "\7?\2\2\u0123h\3\2\2\2\u0124\u0125\7`\2\2\u0125\u0126\7?\2\2\u0126j\3"+
        "\2\2\2\u0127\u0128\7~\2\2\u0128\u0129\7?\2\2\u0129l\3\2\2\2\u012a\u012b"+
        "\7>\2\2\u012b\u012c\7>\2\2\u012c\u012d\7?\2\2\u012dn\3\2\2\2\u012e\u012f"+
        "\7@\2\2\u012f\u0130\7@\2\2\u0130\u0131\7?\2\2\u0131p\3\2\2\2\u0132\u0133"+
        "\7@\2\2\u0133\u0134\7@\2\2\u0134\u0135\7@\2\2\u0135\u0136\7?\2\2\u0136"+
        "r\3\2\2\2\u0137\u0138\7\60\2\2\u0138\u0139\7\60\2\2\u0139\u013a\7?\2\2"+
        "\u013at\3\2\2\2\u013b\u013d\7\62\2\2\u013c\u013e\t\3\2\2\u013d\u013c\3"+
        "\2\2\2\u013e\u013f\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140"+
        "\u0142\3\2\2\2\u0141\u0143\t\4\2\2\u0142\u0141\3\2\2\2\u0142\u0143\3\2"+
        "\2\2\u0143v\3\2\2\2\u0144\u0145\7\62\2\2\u0145\u0147\t\5\2\2\u0146\u0148"+
        "\t\6\2\2\u0147\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u0147\3\2\2\2\u0149"+
        "\u014a\3\2\2\2\u014a\u014c\3\2\2\2\u014b\u014d\t\4\2\2\u014c\u014b\3\2"+
        "\2\2\u014c\u014d\3\2\2\2\u014dx\3\2\2\2\u014e\u0157\7\62\2\2\u014f\u0153"+
        "\t\7\2\2\u0150\u0152\t\b\2\2\u0151\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153"+
        "\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2"+
        "\2\2\u0156\u014e\3\2\2\2\u0156\u014f\3\2\2\2\u0157\u0159\3\2\2\2\u0158"+
        "\u015a\t\4\2\2\u0159\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015az\3\2\2\2"+
        "\u015b\u0164\7\62\2\2\u015c\u0160\t\7\2\2\u015d\u015f\t\b\2\2\u015e\u015d"+
        "\3\2\2\2\u015f\u0162\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161"+
        "\u0164\3\2\2\2\u0162\u0160\3\2\2\2\u0163\u015b\3\2\2\2\u0163\u015c\3\2"+
        "\2\2\u0164\u016c\3\2\2\2\u0165\u0169\7\60\2\2\u0166\u0168\t\b\2\2\u0167"+
        "\u0166\3\2\2\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2"+
        "\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u0165\3\2\2\2\u016c"+
        "\u016d\3\2\2\2\u016d\u0175\3\2\2\2\u016e\u0170\7\60\2\2\u016f\u0171\t"+
        "\b\2\2\u0170\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0170\3\2\2\2\u0172"+
        "\u0173\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u0163\3\2\2\2\u0174\u016e\3\2"+
        "\2\2\u0175\u017f\3\2\2\2\u0176\u0178\t\t\2\2\u0177\u0179\t\n\2\2\u0178"+
        "\u0177\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017b\3\2\2\2\u017a\u017c\t\b"+
        "\2\2\u017b\u017a\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017b\3\2\2\2\u017d"+
        "\u017e\3\2\2\2\u017e\u0180\3\2\2\2\u017f\u0176\3\2\2\2\u017f\u0180\3\2"+
        "\2\2\u0180\u0182\3\2\2\2\u0181\u0183\t\13\2\2\u0182\u0181\3\2\2\2\u0182"+
        "\u0183\3\2\2\2\u0183|\3\2\2\2\u0184\u018c\7$\2\2\u0185\u0186\7^\2\2\u0186"+
        "\u018b\7$\2\2\u0187\u0188\7^\2\2\u0188\u018b\7^\2\2\u0189\u018b\n\f\2"+
        "\2\u018a\u0185\3\2\2\2\u018a\u0187\3\2\2\2\u018a\u0189\3\2\2\2\u018b\u018e"+
        "\3\2\2\2\u018c\u018d\3\2\2\2\u018c\u018a\3\2\2\2\u018d\u018f\3\2\2\2\u018e"+
        "\u018c\3\2\2\2\u018f\u0190\7$\2\2\u0190~\3\2\2\2\u0191\u0192\7)\2\2\u0192"+
        "\u0193\13\2\2\2\u0193\u0194\7)\2\2\u0194\u0080\3\2\2\2\u0195\u0196\7v"+
        "\2\2\u0196\u0197\7t\2\2\u0197\u0198\7w\2\2\u0198\u0199\7g\2\2\u0199\u0082"+
        "\3\2\2\2\u019a\u019b\7h\2\2\u019b\u019c\7c\2\2\u019c\u019d\7n\2\2\u019d"+
        "\u019e\7u\2\2\u019e\u019f\7g\2\2\u019f\u0084\3\2\2\2\u01a0\u01a1\7p\2"+
        "\2\u01a1\u01a2\7w\2\2\u01a2\u01a3\7n\2\2\u01a3\u01a4\7n\2\2\u01a4\u0086"+
        "\3\2\2\2\u01a5\u01a6\7x\2\2\u01a6\u01a7\7q\2\2\u01a7\u01a8\7k\2\2\u01a8"+
        "\u01a9\7f\2\2\u01a9\u0088\3\2\2\2\u01aa\u01ae\t\r\2\2\u01ab\u01ad\t\16"+
        "\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae"+
        "\u01af\3\2\2\2\u01af\u008a\3\2\2\2\u01b0\u01ae\3\2\2\2\30\2\u008e\u013f"+
        "\u0142\u0149\u014c\u0153\u0156\u0159\u0160\u0163\u0169\u016c\u0172\u0174"+
        "\u0178\u017d\u017f\u0182\u018a\u018c\u01ae\3\b\2\2";
    public static final ATN _ATN =
        new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}